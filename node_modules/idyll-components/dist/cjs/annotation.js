'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = require('idyll-component-children'),
    filterChildren = _require.filterChildren;

var Annotation = function (_React$PureComponent) {
  _inherits(Annotation, _React$PureComponent);

  function Annotation() {
    _classCallCheck(this, Annotation);

    return _possibleConstructorReturn(this, _React$PureComponent.apply(this, arguments));
  }

  Annotation.prototype.render = function render() {
    var children = this.props.children;


    var annotationBox = filterChildren(children || [], function (c) {
      var name = '';
      if (c && c.props && c.props.idyllASTNode && c.props.idyllASTNode.name) {
        name = c.props.idyllASTNode.name;
      } else if (c && c._idyll && c._idyll.name) {
        name = c._idyll.name;
      } else if (c && c.type && c.type.name) {
        name = c.type.name;
      } else {
        return false;
      }
      return name.toLowerCase() === 'graphic';
    });

    var inlineText = filterChildren(children || [], function (c) {
      var name = '';
      if (c && c.props && c.props.idyllASTNode && c.props.idyllASTNode.name) {
        name = c.props.idyllASTNode.name;
      } else if (c && c._idyll && c._idyll.name) {
        name = c._idyll.name;
      } else if (c && c.type && c.type.name) {
        name = c.type.name;
      } else {
        return true;
      }
      return name.toLowerCase() !== 'graphic';
    });

    return _react2.default.createElement(
      'div',
      { style: { display: 'inline' } },
      ' ',
      _react2.default.createElement(
        'div',
        { className: 'annotated-text' },
        inlineText,
        ' ',
        _react2.default.createElement(
          'div',
          { className: 'annotation-text' },
          annotationBox
        )
      ),
      ' '
    );
  };

  return Annotation;
}(_react2.default.PureComponent);

Annotation._idyll = {
  name: 'Annotation',
  tagType: 'open',
  displayType: 'inline'
};

exports.default = Annotation;