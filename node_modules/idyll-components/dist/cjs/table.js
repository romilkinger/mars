'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _BUTTON_DISABLED;

var _reactTable = require('react-table');

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');


var styles = {
  CELL: {
    flex: '1',
    width: '100px',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
  },

  ROW: { display: 'inline-flex', flexGrow: '1' },

  PAGINATION: {
    display: 'flex',
    alignItems: 'stretch',
    justifyContent: 'space-between',
    flexWrap: 'wrap',
    padding: '3px',
    boxSizing: 'border-box',
    boxShadow: '0 0 15px 0 rgb(0 0 0 / 10%)',
    borderTop: '2px solid rgba(0,0,0,0.1)'
  },

  BUTTON_ENABLED: {
    boxSizing: 'border-box',
    margin: 0,
    border: 0,
    borderRadius: '3px',
    padding: '6px',
    fontSize: '1em',
    color: 'rgba(0, 0, 0, 0.6)',
    background: 'rgba(0, 0, 0, 0.1)',
    cursor: 'pointer',
    width: '100%'
  },

  BUTTON_DISABLED: (_BUTTON_DISABLED = {
    boxSizing: 'border-box',
    margin: 0,
    border: 0,
    borderRadius: '3px',
    padding: '6px',
    fontSize: '1em',
    color: 'rgba(0, 0, 0, 0.6)',
    background: 'rgba(0, 0, 0, 0.1)',
    cursor: 'pointer',
    width: '100%',
    opacity: 0.5
  }, _BUTTON_DISABLED['cursor'] = 'default', _BUTTON_DISABLED),

  PAGINATION_CONTROL: {
    display: 'flex',
    flex: 1,
    textAlign: 'center'
  },

  PAGINATION_CENTER: {
    display: 'flex',
    flex: 1.5,
    flexWrap: 'wrap',
    alignItems: 'center',
    justifyContent: 'space-around'
  },

  NO_ROWS_CONTAINER: {
    textAlign: 'center',
    opacity: '0.5',
    borderBottom: '1px solid #000',
    lineHeight: '0.1em',
    margin: '10px 0 20px'
  },

  NO_ROWS_CONTENT: {
    background: 'white',
    padding: '0 10px'
  }
};

/**
 * Given a new table page number and the table's page
 * count, returns the correct page number within
 * the page count bounds
 * @param {number} newPageNumber the new page number
 * @param {number} pageCount the table's page count
 * @returns a page number within the page count bounds
 */
var getPageNumber = function getPageNumber(newPageNumber, pageCount) {
  if (newPageNumber <= 0) {
    return 1;
  } else if (newPageNumber > pageCount) {
    return pageCount;
  } else {
    return newPageNumber;
  }
};

var TableComponent = function TableComponent(props) {
  var _React$useState = React.useState(1),
      pageJumpValue = _React$useState[0],
      setPageJumpValue = _React$useState[1];

  if (!props.data && props.value) {
    props.data = props.value;
  }

  // create data and columns
  var data = React.useMemo(function () {
    return props.data;
  }, [props.data]);
  var columns = React.useMemo(function () {
    if ((props.data || []).length) {
      return Object.keys(props.data[0]).filter(function (d) {
        return d !== '';
      }).map(function (d) {
        return {
          Header: d,
          accessor: d
        };
      });
    }
    return [];
  }, [props.data]);

  var rowSizes = React.useMemo(function () {
    var sizes = [5, 10, 20, 25, 50, 100];
    if (!sizes.includes(props.defaultPageSize)) {
      sizes.unshift(props.defaultPageSize);
    }
    return sizes;
  }, [props.defaultPageSize]);

  var _useTable = (0, _reactTable.useTable)({
    columns: columns,
    data: data,
    initialState: { pageIndex: 0, pageSize: props.defaultPageSize }
  }, _reactTable.useSortBy, _reactTable.usePagination),
      getTableProps = _useTable.getTableProps,
      getTableBodyProps = _useTable.getTableBodyProps,
      headerGroups = _useTable.headerGroups,
      prepareRow = _useTable.prepareRow,
      page = _useTable.page,
      canPreviousPage = _useTable.canPreviousPage,
      canNextPage = _useTable.canNextPage,
      pageCount = _useTable.pageCount,
      nextPage = _useTable.nextPage,
      previousPage = _useTable.previousPage,
      gotoPage = _useTable.gotoPage,
      setPageSize = _useTable.setPageSize,
      _useTable$state = _useTable.state,
      pageIndex = _useTable$state.pageIndex,
      pageSize = _useTable$state.pageSize;

  var onPageJump = function onPageJump(e) {
    e.stopPropagation();

    var value = e.target.value;
    if (value != '') {
      value = getPageNumber(Number(value), pageCount);
    }

    gotoPage(value === '' ? pageIndex : Number(value) - 1);
    setPageJumpValue(value);
  };

  var onInputBlur = function onInputBlur() {
    if (pageJumpValue === '') {
      // prevent page from jumping to 0
      setPageJumpValue(pageIndex + 1);
    }
  };

  var onButtonClick = function onButtonClick(callback, increment, canIncrement) {
    if (canIncrement) {
      callback();

      var newPage = getPageNumber(pageIndex + 1 + increment, pageCount);
      setPageJumpValue(newPage);
    }
  };

  var onSortClick = function onSortClick(callback, e) {
    e.stopPropagation();

    callback(e);
    setPageJumpValue(1);
  };

  var updateDefaultPageSize = function updateDefaultPageSize(e) {
    e.stopPropagation();

    var newPageSize = Number(e.target.value);
    setPageSize(newPageSize);

    // page jump handling
    gotoPage(0);
    setPageJumpValue(1);
  };

  return React.createElement(
    'div',
    { className: 'table-container' },
    data.length === 0 ? React.createElement(
      'div',
      { style: styles.NO_ROWS_CONTAINER },
      React.createElement(
        'span',
        { style: styles.NO_ROWS_CONTENT },
        'No Rows Found'
      )
    ) :
    // Table
    React.createElement(
      'div',
      null,
      React.createElement(
        'div',
        { className: 'table ' + (props.className || '') },
        React.createElement(
          'table',
          _extends({}, getTableProps(), { style: { marginBottom: '0' } }),
          React.createElement(TableHeader, {
            columns: columns,
            headerGroups: headerGroups,
            onSortClick: onSortClick
          }),
          React.createElement(TableBody, {
            columns: columns,
            getTableBodyProps: getTableBodyProps,
            prepareRow: prepareRow,
            page: page
          })
        )
      ),
      React.createElement(
        'div',
        {
          className: 'table-pagination',
          style: _extends({}, styles.PAGINATION, {
            display: props.data.length > props.defaultPageSize && props.showPagination ? 'flex' : 'none'
          })
        },
        React.createElement(PaginationButton, {
          className: 'table-pagination-previous',
          onButtonClick: onButtonClick,
          buttonText: 'Previous',
          pageTurnFunction: previousPage,
          pageTurnIncrement: -1,
          enabled: canPreviousPage
        }),
        React.createElement(
          'div',
          {
            className: 'table-pagination-center',
            style: styles.PAGINATION_CENTER
          },
          React.createElement(
            'span',
            { style: { display: 'flex', alignItems: 'baseline' } },
            'Page',
            ' ',
            props.showPageJump ? React.createElement(PaginationJumpInput, {
              pageCount: pageCount,
              pageJumpValue: pageJumpValue,
              onPageJump: onPageJump,
              onInputBlur: onInputBlur
            }) : pageIndex + 1,
            ' ',
            'of ',
            pageCount
          ),
          props.showPageSizeOptions ? React.createElement(PaginationRowSelect, {
            rowOptionValue: pageSize,
            updateDefaultPageSize: updateDefaultPageSize,
            rowSizes: rowSizes
          }) : null
        ),
        React.createElement(PaginationButton, {
          className: 'table-pagination-next',
          onButtonClick: onButtonClick,
          buttonText: 'Next',
          pageTurnFunction: nextPage,
          pageTurnIncrement: 1,
          enabled: canNextPage
        })
      )
    )
  );
};

var TableHeader = function TableHeader(props) {
  var columns = props.columns,
      headerGroups = props.headerGroups,
      onSortClick = props.onSortClick;


  return React.createElement(
    'thead',
    {
      style: {
        display: 'flex',
        flexDirection: 'column',
        width: '100%',
        minWidth: columns.length * 100 + 'px'
      }
    },
    headerGroups.map(function (headerGroup) {
      return React.createElement(
        'tr',
        _extends({}, headerGroup.getHeaderGroupProps(), { style: styles.ROW }),
        headerGroup.headers.map(function (column, i) {
          var sortStyle = column.isSorted ? !column.isSortedDesc ? {
            borderTop: '2px solid black'
          } : { borderBottom: '2px solid black' } : {};

          var onSort = column.getSortByToggleProps().onClick;
          var sortProps = _extends({}, column.getSortByToggleProps, {
            onClick: function onClick(e) {
              return onSortClick(onSort, e);
            }
          });

          return React.createElement(
            'th',
            _extends({}, column.getHeaderProps(sortProps), {
              key: column.id + '-' + i,
              style: _extends({}, sortStyle, styles.CELL, {
                cursor: 'pointer'
              })
            }),
            column.render('Header')
          );
        })
      );
    })
  );
};

var TableBody = function TableBody(props) {
  var columns = props.columns,
      page = props.page,
      prepareRow = props.prepareRow,
      getTableBodyProps = props.getTableBodyProps;


  return React.createElement(
    'tbody',
    _extends({}, getTableBodyProps(), {
      style: {
        display: 'flex',
        flexDirection: 'column',
        width: '100%',
        minWidth: columns.length * 100 + 'px'
      }
    }),
    page.map(function (row, i) {
      // must call this every render
      prepareRow(row);
      return React.createElement(
        'tr',
        _extends({
          key: row.id + '-' + row.cells[0].column.Header + '-' + i
        }, row.getRowProps(), {
          style: styles.ROW
        }),
        row.cells.map(function (cell, j) {
          return React.createElement(
            'td',
            _extends({
              key: cell.value + '-' + j,
              style: styles.CELL
            }, cell.getCellProps()),
            cell.render('Cell')
          );
        })
      );
    })
  );
};

var PaginationButton = function PaginationButton(props) {
  var onButtonClick = props.onButtonClick,
      enabled = props.enabled,
      buttonText = props.buttonText,
      pageTurnFunction = props.pageTurnFunction,
      pageTurnIncrement = props.pageTurnIncrement,
      rest = _objectWithoutProperties(props, ['onButtonClick', 'enabled', 'buttonText', 'pageTurnFunction', 'pageTurnIncrement']);

  return React.createElement(
    'div',
    _extends({}, rest, { style: styles.PAGINATION_CONTROL }),
    React.createElement(
      'button',
      {
        onClick: function onClick() {
          return onButtonClick(pageTurnFunction, pageTurnIncrement, enabled);
        },
        disabled: !enabled,
        style: enabled ? styles.BUTTON_ENABLED : styles.BUTTON_DISABLED
      },
      buttonText
    )
  );
};

var PaginationJumpInput = function PaginationJumpInput(props) {
  var pageCount = props.pageCount,
      pageJumpValue = props.pageJumpValue,
      onPageJump = props.onPageJump,
      onInputBlur = props.onInputBlur;


  return React.createElement(
    'div',
    { className: 'table-pagination-jump' },
    React.createElement('input', {
      type: 'number',
      style: { margin: '10px' },
      min: 1,
      max: pageCount,
      value: pageJumpValue,
      onChange: onPageJump,
      onBlur: onInputBlur
    })
  );
};

var PaginationRowSelect = function PaginationRowSelect(props) {
  var rowOptionValue = props.rowOptionValue,
      updateDefaultPageSize = props.updateDefaultPageSize,
      rowSizes = props.rowSizes;


  return React.createElement(
    'span',
    null,
    React.createElement(
      'select',
      { value: rowOptionValue, onChange: updateDefaultPageSize },
      rowSizes.map(function (size) {
        return React.createElement(
          'option',
          {
            key: 'table-row-size-' + size,
            value: size
          },
          size + ' rows'
        );
      })
    )
  );
};

TableComponent.defaultProps = {
  data: [],
  showPageSizeOptions: false,
  showPageJump: false,
  defaultPageSize: 20,
  showPagination: true
};

TableComponent._idyll = {
  name: 'Table',
  tagType: 'closed',
  props: [{
    name: 'data',
    type: 'array',
    description: 'The data to be shown in a table. Should be an array of objects. Alias: data',
    example: '`[{name: "A", value: 0}, {name: "B", value: 5}]`'
  }, {
    name: 'defaultPageSize',
    type: 'number',
    example: '10',
    description: 'The number of datapoints to be shown on a page.',
    defaultValue: '20'
  }, {
    name: 'showPagination',
    type: 'boolean',
    example: 'false',
    description: 'Show next and previous page buttons.',
    defaultValue: 'true'
  }, {
    name: 'showPageSizeOptions',
    type: 'boolean',
    example: 'false',
    description: 'Show options to configure page size.',
    defaultValue: 'false'
  }, {
    name: 'showPageJump',
    type: 'boolean',
    example: 'false',
    description: 'Show page jump option.',
    defaultValue: 'false'
  }]
};

exports.default = TableComponent;