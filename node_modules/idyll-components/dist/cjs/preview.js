'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Preview = function (_React$Component) {
  _inherits(Preview, _React$Component);

  function Preview(props) {
    _classCallCheck(this, Preview);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      mounted: false
    };
    return _this;
  }

  Preview.prototype.componentDidMount = function componentDidMount() {
    this.setState({
      mounted: true
    });
  };

  Preview.prototype.render = function render() {
    var _props = this.props,
        hasError = _props.hasError,
        idyll = _props.idyll,
        updateProps = _props.updateProps,
        title = _props.title,
        description = _props.description,
        cardSize = _props.cardSize,
        url = _props.url,
        media = _props.media,
        props = _objectWithoutProperties(_props, ['hasError', 'idyll', 'updateProps', 'title', 'description', 'cardSize', 'url', 'media']);

    if (!this.state.mounted) {
      return _react2.default.createElement(
        'a',
        { href: url },
        title,
        ' - ',
        description
      );
    }

    var ReactTinyLink = require('react-tiny-link').ReactTinyLink;
    if (this.props.media) {
      return _react2.default.createElement(ReactTinyLink, {
        header: title,
        description: description,
        cardSize: cardSize,
        showGraphic: true,
        url: url,
        defaultMedia: media
      });
    }
    return _react2.default.createElement(ReactTinyLink, {
      header: title,
      description: description,
      showGraphic: false,
      url: url
    });
  };

  return Preview;
}(_react2.default.Component);

Preview._idyll = {
  name: 'Preview',
  tagType: 'closed',
  props: [{
    name: 'title',
    type: 'string',
    example: '"This is the preview title"',
    description: 'The title text to display on the card'
  }, {
    name: 'description',
    type: 'string',
    example: '"This is the preview description"',
    description: 'The description text to display on the card'
  }, {
    name: 'cardSize',
    type: 'string',
    example: '"small"',
    description: 'Designate size of the preview card, can be small or large'
  }, {
    name: 'url',
    type: 'string',
    example: '"https://idyll-lang.org/"',
    description: 'The URL to open when the link is clicked'
  }, {
    name: 'media',
    type: 'string',
    example: '"https://placebear.com/600/320"',
    description: 'The media url or directory of the image or gif'
  }]
};

exports.default = Preview;