var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Fragment } from 'react';

var TextInput = function (_React$PureComponent) {
  _inherits(TextInput, _React$PureComponent);

  function TextInput(props) {
    _classCallCheck(this, TextInput);

    var _this = _possibleConstructorReturn(this, _React$PureComponent.call(this, props));

    _this.onChange = _this.onChange.bind(_this);
    _this.state = { error: { msg: '', isError: false } };
    return _this;
  }

  TextInput.prototype.onChange = function onChange(e) {
    var value = e.target.value || '';
    var pattern = this.props.pattern;
    var patternMismatchMessage = this.props.patternMismatchMessage || 'Input value doesn\'t match pattern';

    this.props.updateProps({ value: value });

    if (pattern) {
      try {
        if (!value.match(pattern)) {
          throw new Error(patternMismatchMessage);
        }

        this.setState({ error: { msg: '', isError: false } });
      } catch (err) {
        this.setState({
          error: {
            msg: err.message || 'Input value is not valid',
            isError: true
          }
        });
      }
    }
  };

  TextInput.prototype.render = function render() {
    var error = this.state.error;

    var _props = this.props,
        idyll = _props.idyll,
        hasError = _props.hasError,
        updateProps = _props.updateProps,
        props = _objectWithoutProperties(_props, ['idyll', 'hasError', 'updateProps']);

    return React.createElement(
      Fragment,
      null,
      React.createElement('input', _extends({
        className: error.isError ? 'idyll-input-error' : '',
        onClick: this.props.onClick || function (e) {
          return e.stopPropagation();
        },
        type: 'text',
        onChange: this.onChange
      }, props)),
      error.isError && React.createElement(
        'span',
        { className: 'idyll-input-error' },
        error.msg
      )
    );
  };

  return TextInput;
}(React.PureComponent);

TextInput._idyll = {
  name: 'TextInput',
  tagType: 'closed',
  props: [{
    name: 'value',
    type: 'string',
    example: 'x',
    description: 'The current value of the text entry box.'
  }, {
    name: 'pattern',
    type: 'object',
    example: '/w+/',
    description: 'A regex pattern to validate input field'
  }, {
    name: 'patternMismatchMessage',
    type: 'string',
    example: 'Value doesnt match pattern',
    description: "A string message to display after a pattern mismatch. Default is: 'Input value is not valid'"
  }]
};

export default TextInput;